generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(uuid()) @db.Uuid
  email              String
  nickname           String?
  avatarUrl          String?             @map("avatar_url")
  role               String              @default("user")
  status             String              @default("active")
  locale             String?
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  inviteCode         String              @default("") @map("invite_code")
  invitedBy          String              @default("") @map("invited_by")
  isAffiliate        Boolean             @default(false) @map("is_affiliate")
  password           String?
  planExpiredAt      DateTime?           @map("plan_expired_at") @db.Timestamptz(6)
  planType           String              @default("free") @map("plan_type")
  signinIp           String?             @map("signin_ip")
  signinOpenid       String?             @map("signin_openid")
  signinProvider     String?             @map("signin_provider")
  signinType         String?             @map("signin_type")
  totalCredits       Int                 @default(0) @map("total_credits")
  auditLogs          AdminAuditLog[]
  apiKeys            ApiKey[]
  creditTransactions CreditTransaction[]
  oauthSessions      OauthSession[]
  orders             Order[]
  referral_meta      referral_meta?
  usageRecords       UsageRecord[]
  userPackages       UserPackage[]
  wallets            Wallet?
  costStats          UserCostStats?

  @@unique([email, signinProvider], name: "uk_email_provider")
  @@index([email], map: "idx_email")
  @@index([inviteCode], map: "idx_invite_code")
  @@map("users")
}

model AccountGroup {
  id               String            @id @default(uuid()) @db.Uuid
  name             String            @unique
  provider         String
  strategy         String
  defaultRegion    String?           @map("default_region")
  defaultModels    Json              @default("{}") @map("default_models")
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  providerAccounts ProviderAccount[]

  @@map("account_groups")
}

model ProviderAccount {
  id                   String           @id @default(uuid()) @db.Uuid
  provider             String
  name                 String?
  region               String?
  allowedModels        Json             @default("[]") @map("allowed_models")
  credentialRef        String?          @map("credential_ref")
  encryptedCredentials Json?            @map("encrypted_credentials")
  maxConcurrency       Int?             @map("max_concurrency")
  maxRpm               Int?             @map("max_rpm")
  maxTpm               Int?             @map("max_tpm")
  dailyTokensLimit     BigInt?          @map("daily_tokens_limit")
  weight               Int              @default(1)
  priority             Int              @default(0)
  isActive             Boolean          @default(true) @map("is_active")
  groupId              String?          @map("group_id") @db.Uuid
  status               String           @default("healthy")
  lastError            String?          @map("last_error")
  cooldownUntil        DateTime?        @map("cooldown_until") @db.Timestamptz(6)
  createdAt            DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  group                AccountGroup?    @relation(fields: [groupId], references: [id])
  usageAggregates      UsageAggregate[]

  @@index([provider])
  @@index([groupId])
  @@index([isActive])
  @@map("provider_accounts")
}

model Package {
  id           String        @id @default(uuid()) @db.Uuid
  name         String
  version      String
  description  String?
  priceCents   Int           @map("price_cents")
  currency     String        @default("USD")
  dailyPoints  Int           @map("daily_points")
  planType     String        @map("plan_type")
  validDays    Int?          @map("valid_days")
  features     Json          @default("{}")
  limitations  Json          @default("{}")
  isActive     Boolean       @default(true) @map("is_active")
  sortOrder    Int           @default(0) @map("sort_order")
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  orders       Order[]
  userPackages UserPackage[]

  @@unique([name, version])
  @@index([isActive])
  @@map("packages")
}

model Order {
  id                 String              @id @default(uuid()) @db.Uuid
  orderNo            String              @unique @map("order_no")
  userId             String              @map("user_id") @db.Uuid
  status             String              @default("created")
  amountCents        Int                 @map("amount_cents")
  currency           String
  productType        String              @map("product_type")
  packageId          String?             @map("package_id") @db.Uuid
  creditsPoints      Int?                @map("credits_points")
  paymentProvider    String?             @map("payment_provider")
  paymentSessionId   String?             @map("payment_session_id")
  paidAt             DateTime?           @map("paid_at") @db.Timestamptz(6)
  details            Json                @default("{}")
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  creditTransactions CreditTransaction[]
  package            Package?            @relation(fields: [packageId], references: [id], onDelete: Restrict)
  user               User                @relation(fields: [userId], references: [id])
  userPackages       UserPackage[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model Wallet {
  userId                  String    @id @map("user_id") @db.Uuid
  packageDailyQuotaTokens BigInt    @default(0) @map("package_daily_quota_tokens")
  packageTokensRemaining  BigInt    @default(0) @map("package_tokens_remaining")
  packageResetAt          DateTime? @map("package_reset_at") @db.Timestamptz(6)
  independentTokens       BigInt    @default(0) @map("independent_tokens")
  lockedTokens            BigInt    @default(0) @map("locked_tokens")
  version                 Int       @default(0)
  createdAt               DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  dailyUsageCount         BigInt    @default(0) @map("daily_usage_count")
  dailyUsageResetAt       DateTime? @map("daily_usage_reset_at") @db.Timestamptz(6)
  lastRecoveryAt          DateTime? @map("last_recovery_at") @db.Timestamptz(6)
  manualResetAt           DateTime? @map("manual_reset_at") @db.Timestamptz(6)
  manualResetCount        Int       @default(0) @map("manual_reset_count")
  user                    User      @relation(fields: [userId], references: [id])

  @@map("wallets")
}

model ApiKey {
  id              String           @id @default(uuid()) @db.Uuid
  ownerUserId     String?          @map("owner_user_id") @db.Uuid
  keyHash         String           @unique @map("key_hash")
  prefix          String
  name            String?
  status          String           @default("active")
  expiresAt       DateTime?        @map("expires_at") @db.Timestamptz(6)
  meta            Json             @default("{}")
  lastUsedAt      DateTime?        @map("last_used_at") @db.Timestamptz(6)
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  owner           User?            @relation(fields: [ownerUserId], references: [id])
  costAggregates  CostAggregate[]
  usageAggregates UsageAggregate[]
  usageRecords    UsageRecord[]

  @@index([ownerUserId])
  @@index([status])
  @@index([ownerUserId, status, createdAt], map: "idx_api_keys_owner_status_created")
  @@map("api_keys")
}

model UserPackage {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  packageId        String   @map("package_id") @db.Uuid
  startAt          DateTime @map("start_at") @db.Timestamptz(6)
  endAt            DateTime @map("end_at") @db.Timestamptz(6)
  dailyPoints      Int      @map("daily_points")
  dailyQuotaTokens BigInt   @map("daily_quota_tokens")
  isActive         Boolean  @default(true) @map("is_active")
  packageSnapshot  Json     @default("{}") @map("package_snapshot")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  orderId          String?  @map("order_id") @db.Uuid
  order            Order?   @relation(fields: [orderId], references: [id])
  package          Package  @relation(fields: [packageId], references: [id])
  user             User     @relation(fields: [userId], references: [id])

  @@index([userId, isActive])
  @@index([userId, startAt, endAt])
  @@map("user_packages")
}

model UsageRecord {
  id                      String   @id @default(uuid()) @db.Uuid
  requestId               String   @unique @map("request_id")
  userId                  String   @map("user_id") @db.Uuid
  apiKeyId                String?  @map("api_key_id") @db.Uuid
  provider                String
  model                   String
  promptTokens            Int      @default(0) @map("prompt_tokens")
  completionTokens        Int      @default(0) @map("completion_tokens")
  cacheTokens             Int      @default(0) @map("cache_tokens")
  totalTokens             Int      @default(0) @map("total_tokens")
  tokensCharged           Int      @default(0) @map("tokens_charged")
  pointsCharged           Int      @default(0) @map("points_charged")
  bucketPackageTokens     Int      @default(0) @map("bucket_package_tokens")
  bucketIndependentTokens Int      @default(0) @map("bucket_independent_tokens")
  status                  String
  errorCode               String?  @map("error_code")
  latencyMs               Int?     @map("latency_ms")
  meta                    Json     @default("{}")
  createdAt               DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  apiKey                  ApiKey?  @relation(fields: [apiKeyId], references: [id])
  user                    User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([apiKeyId])
  @@index([createdAt])
  @@map("usage_records")
}

model CreditTransaction {
  id                      String   @id @default(uuid()) @db.Uuid
  userId                  String   @map("user_id") @db.Uuid
  type                    String
  bucket                  String
  tokens                  Int
  points                  Int
  beforePackageTokens     BigInt?  @map("before_package_tokens")
  afterPackageTokens      BigInt?  @map("after_package_tokens")
  beforeIndependentTokens BigInt?  @map("before_independent_tokens")
  afterIndependentTokens  BigInt?  @map("after_independent_tokens")
  requestId               String?  @map("request_id")
  reason                  String?
  meta                    Json     @default("{}")
  createdAt               DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  orderId                 String?  @map("order_id") @db.Uuid
  order                   Order?   @relation(fields: [orderId], references: [id])
  user                    User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@index([orderId])
  @@index([requestId])
  @@map("credit_transactions")
}

model RateLimitPolicy {
  id                     String   @id @default(uuid()) @db.Uuid
  subjectType            String   @map("subject_type")
  subjectId              String   @map("subject_id") @db.Uuid
  windowMinutes          Int?     @map("window_minutes")
  maxRequests            Int?     @map("max_requests")
  maxTokens              Int?     @map("max_tokens")
  maxPoints              Int?     @map("max_points")
  dailyPointsLimit       Int?     @map("daily_points_limit")
  weeklyModelPointsLimit Json     @default("{}") @map("weekly_model_points_limit")
  enabled                Boolean  @default(true)
  createdAt              DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt              DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([subjectType, subjectId])
  @@index([enabled])
  @@map("rate_limit_policies")
}

model AdminAuditLog {
  id          String   @id @default(uuid()) @db.Uuid
  adminUserId String   @map("admin_user_id") @db.Uuid
  action      String
  targetType  String   @map("target_type")
  targetId    String   @map("target_id")
  before      Json?
  after       Json?
  ip          String?
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  admin       User     @relation(fields: [adminUserId], references: [id])

  @@index([adminUserId])
  @@index([createdAt])
  @@map("admin_audit_logs")
}

model OauthSession {
  sessionId String   @id @map("session_id")
  userId    String   @map("user_id") @db.Uuid
  type      String
  data      Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
  @@map("oauth_sessions")
}

model EmailVerificationCode {
  id        String   @id @default(uuid()) @db.Uuid
  email     String
  code      String   @db.VarChar(6)
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  isUsed    Boolean  @default(false) @map("is_used")

  @@index([email, code], map: "idx_email_code")
  @@index([expiresAt], map: "idx_expires_at")
  @@index([createdAt], map: "idx_created_at")
  @@map("email_verification_codes")
}

model CostAggregate {
  apiKeyId    String   @map("api_key_id") @db.Uuid
  granularity String
  bucketAt    DateTime @map("bucket_at") @db.Timestamptz(6)
  amount      Decimal  @default(0) @db.Decimal
  points      Decimal? @db.Decimal
  tokens      Decimal? @db.Decimal
  apiKey      ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@id([apiKeyId, granularity, bucketAt])
  @@map("cost_aggregates")
}

model UsageAggregate {
  apiKeyId     String           @map("api_key_id") @db.Uuid
  accountId    String?          @map("account_id") @db.Uuid
  model        String
  granularity  String
  bucketAt     DateTime         @map("bucket_at") @db.Timestamptz(6)
  inputTokens  BigInt           @default(0) @map("input_tokens")
  outputTokens BigInt           @default(0) @map("output_tokens")
  cacheTokens  BigInt           @default(0) @map("cache_tokens")
  allTokens    BigInt           @default(0) @map("all_tokens")
  requests     BigInt           @default(0)
  account      ProviderAccount? @relation(fields: [accountId], references: [id])
  apiKey       ApiKey           @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@id([apiKeyId, model, granularity, bucketAt])
  @@map("usage_aggregates")
}

model RedemptionCode {
  id        String    @id @default(uuid()) @db.Uuid
  code      String    @unique
  codeType  String    @map("code_type")
  codeValue String    @map("code_value")
  validDays Int       @default(30) @map("valid_days")
  status    String    @default("active")
  batchId   String?   @map("batch_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  usedAt    DateTime? @map("used_at") @db.Timestamptz(6)
  usedBy    String?   @map("used_by") @db.Uuid
  expiresAt DateTime? @map("expires_at") @db.Timestamptz(6)
  notes     String?

  @@index([code], map: "idx_code")
  @@index([status], map: "idx_status")
  @@map("redemption_codes")
}

model referral_meta {
  user_id             String   @id @db.Uuid
  invite_code_changes Int      @default(0)
  updated_at          DateTime @default(now()) @db.Timestamptz(6)
  users               User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model UserCostStats {w
  userId          String   @id @map("user_id") @db.Uuid
  todayPoints     Decimal  @default(0) @map("today_points") @db.Decimal
  weekPoints      Decimal  @default(0) @map("week_points") @db.Decimal
  monthPoints     Decimal  @default(0) @map("month_points") @db.Decimal
  todayPercentile Int      @default(0) @map("today_percentile")
  weekPercentile  Int      @default(0) @map("week_percentile")
  monthPercentile Int      @default(0) @map("month_percentile")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([weekPoints])
  @@index([monthPoints])
  @@map("user_cost_stats")
}
