// Supabase (PostgreSQL) Schema
// 这是与Supabase兼容的新数据库架构

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client-supabase"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ========== 用户模型 ==========
model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  nickname  String?
  avatarUrl String?  @map("avatar_url")
  role      String   @default("user")
  status    String   @default("active")
  locale    String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // 关联
  orders         Order[]
  wallets        Wallet?
  apiKeys        ApiKey[]
  userPackages   UserPackage[]
  oauthSessions  OauthSession[]
  auditLogs      AdminAuditLog[]
  usageRecords   UsageRecord[]
  creditTransactions CreditTransaction[]

  @@map("users")
}

// ========== 账户组模型 ==========
model AccountGroup {
  id            String   @id @default(uuid()) @db.Uuid
  name          String   @unique
  provider      String
  strategy      String
  defaultRegion String?  @map("default_region")
  defaultModels Json     @default("{}") @map("default_models")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // 关联
  providerAccounts ProviderAccount[]

  @@map("account_groups")
}

// ========== 提供商账户模型 ==========
model ProviderAccount {
  id                   String    @id @default(uuid()) @db.Uuid
  provider             String
  name                 String?
  region               String?
  allowedModels        Json      @default("[]") @map("allowed_models")
  credentialRef        String?   @map("credential_ref")
  encryptedCredentials Json?     @map("encrypted_credentials")
  maxConcurrency       Int?      @map("max_concurrency")
  maxRpm               Int?      @map("max_rpm")
  maxTpm               Int?      @map("max_tpm")
  dailyTokensLimit     BigInt?   @map("daily_tokens_limit")
  weight               Int       @default(1)
  priority             Int       @default(0)
  isActive             Boolean   @default(true) @map("is_active")
  groupId              String?   @map("group_id") @db.Uuid
  status               String    @default("healthy")
  lastError            String?   @map("last_error")
  cooldownUntil        DateTime? @map("cooldown_until") @db.Timestamptz
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt            DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // 关联
  group AccountGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)

  @@index([provider])
  @@index([groupId])
  @@index([isActive])
  @@map("provider_accounts")
}

// ========== 套餐模型 ==========
model Package {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  version       String
  description   String?
  priceCents    Int      @map("price_cents")
  currency      String   @default("USD")
  dailyPoints   Int      @map("daily_points")
  planType      String   @map("plan_type")
  validDays     Int?     @map("valid_days")
  features      Json     @default("{}")
  limitations   Json     @default("{}")
  isActive      Boolean  @default(true) @map("is_active")
  sortOrder     Int      @default(0) @map("sort_order")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // 关联
  orders       Order[]
  userPackages UserPackage[]

  @@unique([name, version])
  @@index([isActive])
  @@map("packages")
}

// ========== 订单模型 ==========
model Order {
  id                String    @id @default(uuid()) @db.Uuid
  orderNo           String    @unique @map("order_no")
  userId            String    @map("user_id") @db.Uuid
  status            String    @default("created")
  amountCents       Int       @map("amount_cents")
  currency          String
  productType       String    @map("product_type")
  packageId         String?   @map("package_id") @db.Uuid
  creditsPoints     Int?      @map("credits_points")
  paymentProvider   String?   @map("payment_provider")
  paymentSessionId  String?   @map("payment_session_id")
  paidAt            DateTime? @map("paid_at") @db.Timestamptz
  details           Json      @default("{}")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // 关联
  user              User                @relation(fields: [userId], references: [id], onDelete: Restrict)
  package           Package?            @relation(fields: [packageId], references: [id], onDelete: Restrict)
  userPackages      UserPackage[]
  creditTransactions CreditTransaction[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

// ========== 钱包模型 ==========
model Wallet {
  userId                 String    @id @map("user_id") @db.Uuid
  packageDailyQuotaTokens BigInt   @default(0) @map("package_daily_quota_tokens")
  packageTokensRemaining  BigInt   @default(0) @map("package_tokens_remaining")
  packageResetAt          DateTime? @map("package_reset_at") @db.Timestamptz
  independentTokens       BigInt   @default(0) @map("independent_tokens")
  lockedTokens            BigInt   @default(0) @map("locked_tokens")
  version                 Int      @default(0)
  createdAt               DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt               DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // 关联
  user User @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@map("wallets")
}

// ========== API密钥模型 ==========
model ApiKey {
  id           String    @id @default(uuid()) @db.Uuid
  ownerUserId  String    @map("owner_user_id") @db.Uuid
  keyHash      String    @unique @map("key_hash")
  prefix       String
  name         String?
  status       String    @default("active")
  expiresAt    DateTime? @map("expires_at") @db.Timestamptz
  meta         Json      @default("{}")
  lastUsedAt   DateTime? @map("last_used_at") @db.Timestamptz
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // 关联
  owner        User           @relation(fields: [ownerUserId], references: [id], onDelete: Restrict)
  usageRecords UsageRecord[]

  @@index([ownerUserId])
  @@index([status])
  @@map("api_keys")
}

// ========== 用户套餐模型 ==========
model UserPackage {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  packageId        String   @map("package_id") @db.Uuid
  orderId          String?  @map("order_id") @db.Uuid
  startAt          DateTime @map("start_at") @db.Timestamptz
  endAt            DateTime @map("end_at") @db.Timestamptz
  dailyPoints      Int      @map("daily_points")
  dailyQuotaTokens BigInt   @map("daily_quota_tokens")
  isActive         Boolean  @default(true) @map("is_active")
  packageSnapshot  Json     @default("{}") @map("package_snapshot")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // 关联
  user    User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  package Package  @relation(fields: [packageId], references: [id], onDelete: Restrict)
  order   Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@index([userId, isActive])
  @@index([userId, startAt, endAt])
  @@map("user_packages")
}

// ========== 使用记录模型 ==========
model UsageRecord {
  id                     String    @id @default(uuid()) @db.Uuid
  requestId              String    @unique @map("request_id")
  userId                 String    @map("user_id") @db.Uuid
  apiKeyId               String?   @map("api_key_id") @db.Uuid
  provider               String
  model                  String
  promptTokens           Int       @default(0) @map("prompt_tokens")
  completionTokens       Int       @default(0) @map("completion_tokens")
  cacheTokens            Int       @default(0) @map("cache_tokens")
  totalTokens            Int       @default(0) @map("total_tokens")
  tokensCharged          Int       @default(0) @map("tokens_charged")
  pointsCharged          Int       @default(0) @map("points_charged")
  bucketPackageTokens    Int       @default(0) @map("bucket_package_tokens")
  bucketIndependentTokens Int      @default(0) @map("bucket_independent_tokens")
  status                 String
  errorCode              String?   @map("error_code")
  latencyMs              Int?      @map("latency_ms")
  meta                   Json      @default("{}")
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // 关联
  user   User    @relation(fields: [userId], references: [id], onDelete: Restrict)
  apiKey ApiKey? @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([apiKeyId])
  @@index([createdAt])
  @@map("usage_records")
}

// ========== 积分交易模型 ==========
model CreditTransaction {
  id                       String    @id @default(uuid()) @db.Uuid
  userId                   String    @map("user_id") @db.Uuid
  type                     String
  bucket                   String
  tokens                   Int
  points                   Int
  beforePackageTokens      BigInt?   @map("before_package_tokens")
  afterPackageTokens       BigInt?   @map("after_package_tokens")
  beforeIndependentTokens  BigInt?   @map("before_independent_tokens")
  afterIndependentTokens   BigInt?   @map("after_independent_tokens")
  requestId                String?   @map("request_id")
  orderId                  String?   @map("order_id") @db.Uuid
  reason                   String?
  meta                     Json      @default("{}")
  createdAt                DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // 关联
  user  User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  order Order? @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([createdAt])
  @@index([orderId])
  @@index([requestId])
  @@map("credit_transactions")
}

// ========== 速率限制策略模型 ==========
model RateLimitPolicy {
  id                     String   @id @default(uuid()) @db.Uuid
  subjectType            String   @map("subject_type")
  subjectId              String   @map("subject_id") @db.Uuid
  windowMinutes          Int?     @map("window_minutes")
  maxRequests            Int?     @map("max_requests")
  maxTokens              Int?     @map("max_tokens")
  maxPoints              Int?     @map("max_points")
  dailyPointsLimit       Int?     @map("daily_points_limit")
  weeklyModelPointsLimit Json     @default("{}") @map("weekly_model_points_limit")
  enabled                Boolean  @default(true)
  createdAt              DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt              DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  @@unique([subjectType, subjectId])
  @@index([enabled])
  @@map("rate_limit_policies")
}

// ========== 管理员审计日志模型 ==========
model AdminAuditLog {
  id           String   @id @default(uuid()) @db.Uuid
  adminUserId  String   @map("admin_user_id") @db.Uuid
  action       String
  targetType   String   @map("target_type")
  targetId     String   @map("target_id")
  before       Json?
  after        Json?
  ip           String?
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz

  // 关联
  admin User @relation(fields: [adminUserId], references: [id], onDelete: Restrict)

  @@index([adminUserId])
  @@index([createdAt])
  @@map("admin_audit_logs")
}

// ========== OAuth会话模型 ==========
model OauthSession {
  sessionId String   @id @map("session_id")
  userId    String   @map("user_id") @db.Uuid
  type      String
  data      Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  expiresAt DateTime @map("expires_at") @db.Timestamptz

  // 关联
  user User @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@index([userId])
  @@index([expiresAt])
  @@map("oauth_sessions")
}