-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.account_groups (
  id uuid NOT NULL,
  name text NOT NULL UNIQUE,
  provider text NOT NULL,
  strategy text NOT NULL CHECK (strategy = ANY (ARRAY['round_robin'::text, 'weighted'::text, 'least_load'::text, 'failover'::text])),
  default_region text,
  default_models jsonb NOT NULL DEFAULT '{}'::jsonb,
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT account_groups_pkey PRIMARY KEY (id)
);
CREATE TABLE public.admin_audit_logs (
  id uuid NOT NULL,
  admin_user_id uuid NOT NULL,
  action text NOT NULL,
  target_type text NOT NULL,
  target_id text NOT NULL,
  before jsonb,
  after jsonb,
  ip text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT admin_audit_logs_pkey PRIMARY KEY (id),
  CONSTRAINT admin_audit_logs_admin_user_id_fkey FOREIGN KEY (admin_user_id) REFERENCES public.users(id)
);
CREATE TABLE public.api_keys (
  id uuid NOT NULL,
  owner_user_id uuid NOT NULL,
  key_hash text NOT NULL UNIQUE,
  prefix text NOT NULL,
  name text,
  status text NOT NULL DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'disabled'::text, 'deleted'::text])),
  expires_at timestamp with time zone,
  meta jsonb NOT NULL DEFAULT '{}'::jsonb,
  last_used_at timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT api_keys_pkey PRIMARY KEY (id),
  CONSTRAINT api_keys_owner_user_id_fkey FOREIGN KEY (owner_user_id) REFERENCES public.users(id)
);
CREATE TABLE public.credit_transactions (
  id uuid NOT NULL,
  user_id uuid NOT NULL,
  type text NOT NULL CHECK (type = ANY (ARRAY['income'::text, 'expense'::text, 'adjustment'::text, 'reset'::text])),
  bucket text NOT NULL CHECK (bucket = ANY (ARRAY['package'::text, 'independent'::text, 'mixed'::text, 'none'::text])),
  tokens integer NOT NULL,
  points integer NOT NULL,
  before_package_tokens bigint,
  after_package_tokens bigint,
  before_independent_tokens bigint,
  after_independent_tokens bigint,
  request_id text,
  order_id text,
  reason text,
  meta jsonb NOT NULL DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT credit_transactions_pkey PRIMARY KEY (id),
  CONSTRAINT credit_transactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.email_verification_codes (
  id uuid NOT NULL,
  email text NOT NULL,
  code character varying NOT NULL,
  expires_at timestamp with time zone NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  is_used boolean NOT NULL DEFAULT false,
  CONSTRAINT email_verification_codes_pkey PRIMARY KEY (id)
);
CREATE TABLE public.oauth_sessions (
  session_id text NOT NULL,
  user_id uuid NOT NULL,
  type text NOT NULL,
  data jsonb NOT NULL DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  expires_at timestamp with time zone NOT NULL,
  CONSTRAINT oauth_sessions_pkey PRIMARY KEY (session_id),
  CONSTRAINT oauth_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.orders (
  id uuid NOT NULL,
  order_no text NOT NULL UNIQUE,
  user_id uuid NOT NULL,
  status text NOT NULL DEFAULT 'created'::text CHECK (status = ANY (ARRAY['pending'::text, 'created'::text, 'paid'::text, 'canceled'::text, 'failed'::text, 'refunded'::text])),
  amount_cents integer NOT NULL CHECK (amount_cents >= 0),
  currency text NOT NULL,
  product_type text NOT NULL CHECK (product_type = ANY (ARRAY['package'::text, 'credits'::text])),
  package_id uuid,
  credits_points integer CHECK (credits_points >= 0),
  payment_provider text,
  payment_session_id text,
  paid_at timestamp with time zone,
  details jsonb NOT NULL DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT orders_pkey PRIMARY KEY (id),
  CONSTRAINT orders_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT orders_package_id_fkey FOREIGN KEY (package_id) REFERENCES public.packages(id)
);
CREATE TABLE public.packages (
  id uuid NOT NULL,
  name text NOT NULL,
  version text NOT NULL,
  description text,
  price_cents integer NOT NULL CHECK (price_cents >= 0),
  currency text NOT NULL DEFAULT 'USD'::text,
  daily_points integer NOT NULL CHECK (daily_points >= 0),
  plan_type text NOT NULL CHECK (plan_type = ANY (ARRAY['basic'::text, 'pro'::text, 'enterprise'::text])),
  valid_days integer CHECK (valid_days > 0),
  features jsonb NOT NULL DEFAULT '{}'::jsonb,
  limitations jsonb NOT NULL DEFAULT '{}'::jsonb,
  is_active boolean NOT NULL DEFAULT true,
  sort_order integer NOT NULL DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT packages_pkey PRIMARY KEY (id)
);
CREATE TABLE public.provider_accounts (
  id uuid NOT NULL,
  provider text NOT NULL,
  name text,
  region text,
  allowed_models jsonb NOT NULL DEFAULT '[]'::jsonb,
  credential_ref text,
  encrypted_credentials jsonb,
  max_concurrency integer CHECK (max_concurrency >= 0),
  max_rpm integer CHECK (max_rpm >= 0),
  max_tpm integer CHECK (max_tpm >= 0),
  daily_tokens_limit bigint CHECK (daily_tokens_limit >= 0),
  weight integer NOT NULL DEFAULT 1 CHECK (weight >= 0),
  priority integer NOT NULL DEFAULT 0,
  is_active boolean NOT NULL DEFAULT true,
  group_id uuid,
  status text NOT NULL DEFAULT 'healthy'::text CHECK (status = ANY (ARRAY['healthy'::text, 'degraded'::text, 'down'::text, 'cooldown'::text])),
  last_error text,
  cooldown_until timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT provider_accounts_pkey PRIMARY KEY (id),
  CONSTRAINT provider_accounts_group_id_fkey FOREIGN KEY (group_id) REFERENCES public.account_groups(id)
);
CREATE TABLE public.rate_limit_policies (
  id uuid NOT NULL,
  subject_type text NOT NULL CHECK (subject_type = ANY (ARRAY['user'::text, 'api_key'::text])),
  subject_id uuid NOT NULL,
  window_minutes integer CHECK (window_minutes > 0),
  max_requests integer CHECK (max_requests >= 0),
  max_tokens integer CHECK (max_tokens >= 0),
  max_points integer CHECK (max_points >= 0),
  daily_points_limit integer CHECK (daily_points_limit >= 0),
  weekly_model_points_limit jsonb NOT NULL DEFAULT '{}'::jsonb,
  enabled boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT rate_limit_policies_pkey PRIMARY KEY (id)
);
CREATE TABLE public.usage_records (
  id uuid NOT NULL,
  request_id text NOT NULL UNIQUE,
  user_id uuid NOT NULL,
  api_key_id uuid,
  provider text NOT NULL,
  model text NOT NULL,
  prompt_tokens integer NOT NULL DEFAULT 0 CHECK (prompt_tokens >= 0),
  completion_tokens integer NOT NULL DEFAULT 0 CHECK (completion_tokens >= 0),
  cache_tokens integer NOT NULL DEFAULT 0 CHECK (cache_tokens >= 0),
  total_tokens integer NOT NULL DEFAULT 0 CHECK (total_tokens >= 0),
  tokens_charged integer NOT NULL DEFAULT 0 CHECK (tokens_charged >= 0),
  points_charged integer NOT NULL DEFAULT 0 CHECK (points_charged >= 0),
  bucket_package_tokens integer NOT NULL DEFAULT 0 CHECK (bucket_package_tokens >= 0),
  bucket_independent_tokens integer NOT NULL DEFAULT 0 CHECK (bucket_independent_tokens >= 0),
  status text NOT NULL CHECK (status = ANY (ARRAY['success'::text, 'partial'::text, 'fail'::text, 'canceled'::text])),
  error_code text,
  latency_ms integer,
  meta jsonb NOT NULL DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT usage_records_pkey PRIMARY KEY (id),
  CONSTRAINT usage_records_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT usage_records_api_key_id_fkey FOREIGN KEY (api_key_id) REFERENCES public.api_keys(id)
);
CREATE TABLE public.user_packages (
  id uuid NOT NULL,
  user_id uuid NOT NULL,
  package_id uuid NOT NULL,
  order_id text,
  start_at timestamp with time zone NOT NULL,
  end_at timestamp with time zone NOT NULL,
  daily_points integer NOT NULL CHECK (daily_points >= 0),
  daily_quota_tokens bigint NOT NULL CHECK (daily_quota_tokens >= 0),
  is_active boolean NOT NULL DEFAULT true,
  package_snapshot jsonb NOT NULL DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_packages_pkey PRIMARY KEY (id),
  CONSTRAINT user_packages_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT user_packages_package_id_fkey FOREIGN KEY (package_id) REFERENCES public.packages(id)
);
CREATE TABLE public.users (
  id uuid NOT NULL,
  email text NOT NULL,
  nickname text,
  avatar_url text,
  role text NOT NULL DEFAULT 'user'::text CHECK (role = ANY (ARRAY['user'::text, 'admin'::text])),
  status text NOT NULL DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'suspended'::text, 'deleted'::text])),
  locale text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  invite_code text NOT NULL DEFAULT ''::text,
  invited_by text NOT NULL DEFAULT ''::text,
  is_affiliate boolean NOT NULL DEFAULT false,
  password text,
  plan_expired_at timestamp with time zone,
  plan_type text NOT NULL DEFAULT 'free'::text,
  signin_ip text,
  signin_openid text,
  signin_provider text,
  signin_type text,
  total_credits integer NOT NULL DEFAULT 0,
  CONSTRAINT users_pkey PRIMARY KEY (id)
);
CREATE TABLE public.wallets (
  user_id uuid NOT NULL,
  package_daily_quota_tokens bigint NOT NULL DEFAULT 0 CHECK (package_daily_quota_tokens >= 0),
  package_tokens_remaining bigint NOT NULL DEFAULT 0 CHECK (package_tokens_remaining >= 0),
  package_reset_at timestamp with time zone,
  independent_tokens bigint NOT NULL DEFAULT 0 CHECK (independent_tokens >= 0),
  locked_tokens bigint NOT NULL DEFAULT 0 CHECK (locked_tokens >= 0),
  version integer NOT NULL DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT wallets_pkey PRIMARY KEY (user_id),
  CONSTRAINT wallets_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);