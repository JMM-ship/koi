import "/public/assets/css/vendors/bootstrap.min.css";
import "/public/assets/css/vendors/swiper-bundle.min.css";
import "/public/assets/css/vendors/aos.css";
import "/public/assets/css/vendors/carouselTicker.css";
import "/public/assets/css/vendors/odometer.css";
import "/public/assets/css/vendors/magnific-popup.css";
import "/public/assets/fonts/bootstrap-icons/bootstrap-icons.min.css";
import "/public/assets/fonts/boxicons/boxicons.min.css";
import "/public/assets/fonts/remixicon/remixicon.css";
import "/public/assets/fonts/fontawesome/fontawesome.min.css";
import "/public/assets/fonts/fontawesome/solid.min.css";
import "/public/assets/fonts/fontawesome/regular.min.css";
import "/public/assets/css/main.css";
import "/public/assets/css/responsive-units.css";
import "/public/assets/css/style.css";

import type { Metadata } from "next";
import { headers, cookies } from 'next/headers'
import { resolveLocaleFrom, getDictionary } from '@/lib/i18n/server'
import I18nClientProvider from '@/app/i18n/I18nClientProvider'
import { Libre_Franklin, Rubik } from "next/font/google";
import { Providers } from "./providers";
import DebugProvider from "@/components/debug/DebugProvider";
import ToastProvider from "@/components/providers/ToastProvider";

const LibreFranklinHeading = Libre_Franklin({
    weight: ["300", "400", "500", "600", "700"], // Only bold for headings
    subsets: ["latin"],
    variable: "--tc-heading-font-family",
    display: "swap",
});

const rubik = Rubik({
    weight: ["300", "400", "500", "600", "700"],
    subsets: ["latin"],
    variable: "--tc-body-font-family",
    display: "swap",
});

export const metadata: Metadata = {
    title: "KOI - Your Coding Assistant",
    description: "Generated by KOI - Your Coding Assistant",
    icons: {
        icon: "/favicon.png",
    },
};

export default async function RootLayout({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) {
    // Resolve locale from cookie and Accept-Language; user locale will be wired later if needed
    const cookieStore = cookies()
    const cookieLocale = cookieStore.get('LOCALE')?.value || null
    const acceptLanguage = headers().get('accept-language') || null
    const locale = resolveLocaleFrom({ userLocale: undefined, cookieLocale, acceptLanguage })
    const namespaces = ['common','header','auth','dashboard','reasons','buckets','toasts','sidebar']
    const dictEn = await getDictionary('en', namespaces)
    const dictZh = await getDictionary('zh', namespaces)
    const dicts = { en: dictEn, zh: dictZh }
    return (
        <html lang={locale}>
            <body className={`${LibreFranklinHeading.variable} ${rubik.variable}`}>
                <Providers>
                    <I18nClientProvider locale={locale} dicts={dicts}>
                        <DebugProvider>
                            {children}
                        </DebugProvider>
                        <ToastProvider />
                    </I18nClientProvider>
                </Providers>
            </body>
        </html>
    );
}
